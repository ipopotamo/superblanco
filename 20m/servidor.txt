/*
Este en realidad es el SERVIDOR

 */


import javax.swing.*;
import java.awt.event.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ThreadLocalRandom;
import java.net.*;
import java.io.*;
import java.net.ServerSocket;


public class Main {

    public static JLabel iplabel;
    public static InetAddress ip;

    public static void main(String[] args) throws IOException {


        ServerSocket ss = new ServerSocket(4080);

        pipo opipo = new pipo();
        opipo.algo();

        while (true) {
            Socket s = null;

            try {


                s = ss.accept();


                System.out.println("Se conecto un cliente: " + s);

                // obtaining input and out streams
                DataInputStream dis = new DataInputStream(s.getInputStream());
                DataOutputStream dos = new DataOutputStream(s.getOutputStream());

                System.out.println("le asigno un thread al cliente que se conecto");

                // create a new thread object

                Thread t = new ClientHandler(s, dis, dos);

                // Invoking the start() method
                t.start();

            } catch (Exception e) {
                s.close();
                e.printStackTrace();
            }
        }


        //ip = InetAddress.getLocalHost();

        //iplabel.setText("ip local :" + ip.getHostAddress());




    }


        static class ClientHandler extends Thread {
            DateFormat fordate = new SimpleDateFormat("yyyy/MM/dd");
            DateFormat fortime = new SimpleDateFormat("hh:mm:ss");
            final DataInputStream dis;
            final DataOutputStream dos;
            final Socket s;


            // Constructor
            public ClientHandler(Socket s, DataInputStream dis, DataOutputStream dos) {
                this.s = s;
                this.dis = dis;
                this.dos = dos;
            }


            public void run() {
                String received;
                String toreturn;

                while (true) {
                    try {

                        // Ask user what he wants
                        dos.writeUTF("What do you want?[Date | Time]..\n" +
                                "Type Exit to terminate connection.");

                        // receive the answer from client
                        received = dis.readUTF();

                        if (received.equals("Exit")) {
                            System.out.println("Client " + this.s + " sends exit...");
                            System.out.println("Closing this connection.");
                            this.s.close();
                            System.out.println("Connection closed");
                            break;
                        }

                        // creating Date object
                        Date date = new Date();

                        // write on output stream based on the
                        // answer from the client
                        switch (received) {

                            case "Date":
                                toreturn = fordate.format(date);
                                dos.writeUTF(toreturn);
                                break;

                            case "Time":
                                toreturn = fortime.format(date);
                                dos.writeUTF(toreturn);
                                break;

                            default:
                                dos.writeUTF("Invalid input");
                                break;
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                try {
                    // closing resources
                    this.dis.close();
                    this.dos.close();

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }


        }



    public static class pipo {

        public void pipo() {
        }

        public void algo() {
            JFrame f = new JFrame("VENTANA SERVER");


            final JTextField tf = new JTextField();
            tf.setBounds(50, 50, 150, 20);

            JButton b = new JButton("Cucha");
            b.setBounds(50, 100, 95, 20);

            iplabel = new JLabel("datos:");
            iplabel.setBounds(200, 10, 700, 40);

            JButton j = new JButton("pasala");
            j.setBounds(300, 100, 95, 20);

            JButton salir = new JButton("back");
            salir.setBounds(200, 100, 95, 20);

            final JTextField w = new JTextField();
            w.setBounds(50, 10, 100, 30);

            j.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    w.setText("FLIPENDO");
                }
            });


            b.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    tf.setText("JUAN");

                }
            });
            salir.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    f.dispatchEvent(new WindowEvent(f, WindowEvent.WINDOW_CLOSING));
                }
            });


            //maximizar el frame
            //f.setExtendedState(f.getExtendedState() | JFrame.MAXIMIZED_BOTH);
            //meto los objetos b,tf y titulo al frame
            f.add(w);
            f.add(j);
            f.add(b);
            f.add(tf);

            f.add(salir);
            f.add(iplabel);
            //tama√±o del frame
            f.setSize(700, 900);
            //
            f.setLayout(null);
            //
            f.setVisible(true);
        }
    }
}
